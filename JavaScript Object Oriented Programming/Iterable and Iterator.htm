<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>JAVASCRIPT OOP Iterable dan Iterator</title>
  </head>

  <body>
    <div style="display: flex; width: 100%; height: 100%; flex-wrap: wrap">
      <img
        src="img/Iterable and Iterator.png"
        alt="Iterable and Iterator"
        style="width: 400px; height: 100%"
      />
      <img
        src="img/Kontrak Iterable (dalam TypeScript).png"
        alt="Kontrak Iterable (dalam TypeScript)"
        style="width: 400px; height: 100%"
      />
      <img
        src="img/Kontrak Iterator (dalam TypeScript).png"
        alt="Kontrak Iterator (dalam TypeScript)"
        style="width: 400px; height: 100%"
      />
      <img
        src="img/Kontrak IteratorResult(dalam TypeScript).png"
        alt="Kontrak IteratorResult(dalam TypeScript)"
        style="width: 400px; height: 100%"
      />
      <img
        src="img/Cara Kerja Iterable dan Iterator.png"
        alt="Cara Kerja Iterable dan Iterator"
        style="width: 400px; height: 100%"
      />
    </div>
    <hr />
    <script>
      //Membuat Counter Iterator Result

      class CounterIteratorResult {
        constructor(value, done) {
          this.done = done;
          this.value = value;
        }
      }

      //Membuat Counter Iterator

      class CounterIterator {
        constructor(value, max) {
          this.value = value;
          this.max = max;
        }

        next() {
          try {
            if (this.value > this.max) {
              return new CounterIteratorResult(this.value, true);
            } else {
              return new CounterIteratorResult(this.value, false);
            }
          } finally {
            this.value++;
          }
        }
      }

      //Membuat Counter Iterable

      class Counter {
        constructor(value, max) {
          this.value = value;
          this.max = max;
        }
        [Symbol.iterator]() {
          return new CounterIterator(this.value, this.max);
        }
      }

      const counter = new Counter(1, 10);
      for (const value of counter) {
        console.log(value);
      }
    </script>
  </body>
</html>
